{"data":{"markdownRemark":{"html":"<p>React Hooks have finally landed! So many emotions. Here‚Äôs a small selection of my own in non-chronological order: üßê ü§Ø üòç</p>\n<p>I‚Äôve been writing a library using Hooks for about three months now, and my final, never-gonna-bother-thinking-further-on-this opinion on them is that they‚Äôre amazing, and can enable you to write equally amazing code.</p>\n<p>Of course, like Ben &#x26; Jerry‚Äôs and calorie content, something so beautiful can‚Äôt exist in this universe without caveats.</p>\n<p>In the case of Hooks, those caveats come in the <a href=\"https://reactjs.org/docs/hooks-rules.html#explanation\">form of rules</a>.</p>\n<p>Today, I want to talk about one in particular. This one:</p>\n<blockquote>\n<p>Only call Hooks at the top level. Don‚Äôt call Hooks inside loops, conditions, or nested functions.</p>\n</blockquote>\n<p>Personally, when I saw this rule, I could only think one thing:</p>\n<h2 id=\"witchcraft\"><a href=\"#witchcraft\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Witchcraft!</h2>\n<p>Why does (what looks to be) a normal function have <em>rules</em> around it? It must be magic!</p>\n<p>Of course, like most magic, it isn‚Äôt.</p>\n<p>Dan Abramov explains in <a href=\"https://overreacted.io/why-do-hooks-rely-on-call-order/\">more detail on his blog</a>, but the gist is:</p>\n<ol>\n<li>React knows which component is being rendered at any given time, therefore:</li>\n<li>When a Hook is called, it knows which component is calling it, therefore:</li>\n<li>If we change the calling order of Hooks within a component, React gets confused and breaks, therefore:</li>\n<li><strong>If we want to run hooks within a loop, or conditionally, we need to abstract them into a stand-alone components</strong>.</li>\n</ol>\n<p>Here‚Äôs how:</p>\n<h2 id=\"running-hooks-within-a-loop-like-a-badman\"><a href=\"#running-hooks-within-a-loop-like-a-badman\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Running hooks within a loop like a badman</h2>\n<p>Consider the following component:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">List</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> items <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> items<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>item <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> ref <span class=\"token operator\">=</span> <span class=\"token function\">useRef</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">/* Do something with ref */</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span> <span class=\"token attr-name\">ref</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>ref<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">{</span>item<span class=\"token punctuation\">.</span>label<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Looks normal, right, even sober. Well I‚Äôve got news for you buddy. It isn‚Äôt.</p>\n<p>The trouble with the above code is that, even though we‚Äôre using Hooks within a loop, it‚Äôll actually run just fine on the first render.</p>\n<p>If <code class=\"language-text\">items</code> stays in the same order and the same length, it‚Äôll actually run ‚Äújust fine‚Äù forever, because the order and number of Hooks that the component fires stays consistent.</p>\n<p>But the rule exists because this is way to big an assumption to make. If <code class=\"language-text\">items</code> does change, you‚Äôre fucked! You‚Äôve let your users down, your parents down, and worst of all, you‚Äôve let me down.</p>\n<h3 id=\"the-solution\"><a href=\"#the-solution\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>The solution</h3>\n<p>As I said somewhere in the dark ages of this post, to fix this we need to abstract the contents into a component.</p>\n<p>Create a new component for each <code class=\"language-text\">Item</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Item</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> label <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> ref <span class=\"token operator\">=</span> <span class=\"token function\">useRef</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">/* Do something with ref */</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">{</span>label<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Render the Item Component from the loop:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">List</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> items <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> items<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> label <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Item</span> <span class=\"token attr-name\">label</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>label<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Now, the length and order of <code class=\"language-text\">items</code> can change without our code breaking. Whenever <code class=\"language-text\">Item</code> is rendered, React knows its rendering a different component to <code class=\"language-text\">List</code>, and that information is all it needs to correctly keep track of which Hooks are firing where.</p>\n<p>Running Hooks conditionally</p>\n<p>You might have a Hook that you only want to run conditionally, so your instinct would be to write code like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">const Component = ({ enable }) =&gt; {\n  const ref = useRef()\n\n  if (enable) {\n    useComplexFunctionality(ref)\n  }\n\n  return &lt;div ref={ref} /&gt;\n}</code></pre></div>\n<p>Again, if <code class=\"language-text\">enable</code> changes, a different number of Hooks are going to be called, and React will throw an error (quite rightfully, you charlatan).</p>\n<p>The solution is the same: abstract this hook into a stand-alone component that returns <code class=\"language-text\">null</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">const Functionality = forwardRef((props, ref) =&gt; {\n  useFunctionality(ref)\n  return null\n})</code></pre></div>\n<p>And render that conditionally:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">const Component = ({ enable }) =&gt; {\n  const ref = useRef()\n\n  if (enable) {\n    return (\n      &lt;&gt;\n        &lt;Functionality ref={ref} /&gt;\n        &lt;div ref={ref} /&gt;\n      &lt;/&gt;\n    )\n  } else {\n    return &lt;div ref={ref} /&gt;\n  }\n}</code></pre></div>\n<p>When I first realised this, I thought it seemed a bit icky. But it‚Äôs actually totally legit.</p>\n<p>Composing functionality with components is totally React‚Äôs bag.</p>\n<p>As an added bonus, you gain lifecycle methods that are independent from the host component:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">const Functionality = forwardRef((props, ref) =&gt; {\n  useFunctionality(ref)\n\n  useEffect(() =&gt; {\n    // This code will run when the functionality is first enabled,\n    // not when the host component is mounted\n\n    return () =&gt; {\n      // This code will run when the functionality is disabled,\n      // not when the host component is unmounted\n    }\n  }, [])\n\n  return null\n})</code></pre></div>\n<p>Running Hooks within a nested function</p>\n<p>No, seriously, there is no way around this. Behave.</p>","frontmatter":{"title":"How to break the rules of React Hooks","date":"07 Feb 2019"},"fields":{"slug":"/20190207-break-the-rules-of-react-hooks/","author":"mattperry","description":"We don't seen limitations, only possibilities. ~ Einstein. Or maybe Bruce Lee."}}},"pageContext":{"slug":"/20190207-break-the-rules-of-react-hooks/","author":"mattperry","description":"We don't seen limitations, only possibilities. ~ Einstein. Or maybe Bruce Lee."}}