{"data":{"markdownRemark":{"html":"<p>The upcoming <a href=\"https://developers.google.com/web/updates/2018/10/animation-worklet\">Animation Worklet</a> is part of an interweaving suite of browser APIs collectively called CSS Houdini.</p>\n<p>Together, they’ll offer developers low-level access to various parts of the rendering engine like paint, layout, and of relevance to us, animation.</p>\n<p>I’ve been writing <a href=\"https://popmotion.io/pure\">animation</a> <a href=\"https://framer.com/motion\">libraries</a> for over six years to help push web UI animations beyond simple easing curves. These libraries, and others like them, probably wouldn’t exist if browsers already offered spring, physics or scroll-bound animations.</p>\n<p>But they don’t, so it’s left to developers to fill in the gaps. Animation Worklet is a potential silver bullet that could let us fill those gaps in a much more performant and responsive way.</p>\n<p>Worklets are isolated JavaScript files that run off the main thread. Animations written this way are less likely to be the cause of slow-down in other parts of your app than synchronous <code class=\"language-text\">requestAnimationFrame</code> loops. Likewise, if your site does experience heavy computational load they’ll remain smooth and responsive.</p>\n<p>But that’s <em>if</em> the API reaches its full potential. As far as “if”s go, I put that one in italics.</p>\n<p>A quick glance at <a href=\"http://ishoudinireadyyet.com/\">Is Houdini Ready Yet?</a> shows that Animation Worklet suffers some of the poorest support of all the Houdini APIs. For good reason: It isn’t fully specced yet, and what has been specced falls short of what I would consider an MVP.</p>\n<p>If you’re new to Animation Worklet I highly recommend opening <a href=\"https://codesandbox.io/s/animation-worklet-api-template-vw0mk\">this CodeSandbox sandbox</a> while you read <a href=\"https://developers.google.com/web/updates/2018/10/animation-worklet\">Google’s introductory blog post</a>, which covers the basics of the upcoming API.</p>\n<p>Now you’re all caught up, let’s take a look at the missing pieces that we need from this API if it’s to live up to its tremendous potential.</p>\n<h2 id=\"1-i-am-complete\"><a href=\"#1-i-am-complete\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. I am complete</h2>\n<p>Currently, there’s no specced method for an animation to declare itself complete.</p>\n<p>With no cheap or synchronous way to read the output of an Animation Worklet there’s also no way for the main thread understand when an animation should work, either.</p>\n<p>This means that once started, an animation will run every frame until either the animating component is unmounted or another animation is started in its place.</p>\n<p>So worklets bound to the document timeline will continue to accumulate like cruft over a page session, needlessly running once per frame, potentially negating the performance benefits they’re designed to avoid.</p>\n<p>It also becomes impossible to write code that executes when an animation is finished. So none of this:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">await</span> <span class=\"token function\">animate</span><span class=\"token punctuation\">(</span>element<span class=\"token punctuation\">,</span> values<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">doOtherThing</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// This will never happen</span></code></pre></div>\n<p>Any API like <code class=\"language-text\">this.cancel()</code>, <code class=\"language-text\">effect.playState = &quot;finished&quot;</code>, or <code class=\"language-text\">this.timeline.detach(this)</code> would be an acceptable and simple solution.</p>\n<p>In Google’s <a href=\"https://github.com/GoogleChromeLabs/houdini-samples/blob/master/animation-worklet/spring-sticky/spring-sticky-animator.js\">Spring Sticky demo</a>, there’s the concept of a worklet attaching and detaching itself from a timeline passed in via the worklet’s options:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>options<span class=\"token punctuation\">.</span>documentTimeline<span class=\"token punctuation\">.</span><span class=\"token function\">detach</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>A concept like this is very powerful, as long as a worklet also had access to its “primary” timeline (the one passed as <code class=\"language-text\">WorkletAnimation</code>’s third argument).</p>\n<p>In the example they’re passing reference to both the <code class=\"language-text\">DocumentTimeline</code> and an element’s <code class=\"language-text\">ScrollTimeline</code>, so the worklet can choose when to be driven by each.</p>\n<p>Sadly, this is only possible by exploiting a bug in the Animation Worklet polyfill, as the spec itself (and indeed its Chrome implementation) requires all options to be serialisable.</p>\n<p><a href=\"https://github.com/w3c/css-houdini-drafts/issues/808\">Follow this issue on GitHub</a></p>\n<h2 id=\"2-velocity\"><a href=\"#2-velocity\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. Velocity</h2>\n<p>One of the examples given in the API’s <a href=\"https://github.com/w3c/css-houdini-drafts/blob/master/css-animationworklet/README.md\">Motivating Use Cases</a> is “spring physics”, and indeed this is one of the main use-cases I have for my libraries.</p>\n<p>Spring animations are unique to standard easing animations because they can incorporate velocity from an existing animation, like a drag gesture or easing. They’re interruptable without using cross fading or additive animation tricks.</p>\n<p>Because of this physics-based approach they create naturalistic and engaging UIs that incorporate the user’s input.</p>\n<p>Google have already made <a href=\"https://github.com/GoogleChromeLabs/houdini-samples/blob/master/animation-worklet/spring-timing/spring-timing-animator.js\">a spring example</a> and at first glance it looks like this is implementable as soon as we get the ability for an animation to declare itself finished.</p>\n<p>However, there is currently no way for a worklet to report its velocity to be incorporated into subsequent animations.</p>\n<p>It is currently feasible to feed an initial velocity via <code class=\"language-text\">option</code>s. With some mental leaps it’s probably possible to wrangle velocity into something meaningful to the <code class=\"language-text\">effect.localTime</code> abstraction (which is a slight nonsense in the world of springs - an <code class=\"language-text\">effect.progress</code> would be better).</p>\n<p>Until there’s a way to fish velocity back out of a worklet, this capability is for nothing.</p>\n<p>A hypothetical velocity wouldn’t need to be permanently accessible, only when an animation is finished. So there’d be no per-frame main thread nonsense to worry about.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">animation<span class=\"token punctuation\">.</span><span class=\"token function\">stop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> velocity <span class=\"token operator\">=</span> animation<span class=\"token punctuation\">.</span>localTimeVelocity<span class=\"token punctuation\">;</span></code></pre></div>\n<p>Alternatively a timestamped history of the last few resolved values (ie <code class=\"language-text\">translateX</code> as pixels) would be enough to calculate a velocity.</p>\n<p>Or, there’s the possibility of more monolithic worklets that control all animations and gestures for the duration of a value’s lifecycle. With the ability to <a href=\"https://bugs.chromium.org/p/chromium/issues/detail?id=932619\">send data to an Animation Worklet</a> it’d be possible to track velocity within the worklet itself. But without unclamped timelines (which we’ll get to next), this wouldn’t be a practical match with the current <code class=\"language-text\">KeyframeEffect</code> API.</p>\n<p><a href=\"https://github.com/w3c/css-houdini-drafts/issues/976\">Follow this issue on GitHub</a></p>\n<h2 id=\"3-unclamped-keyframes\"><a href=\"#3-unclamped-keyframes\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. Unclamped keyframes</h2>\n<p>The only way we can run keyframe animations with an Animation Worklet is by creating a <code class=\"language-text\">KeyframeEffect</code>. It can be configured in the main thread with all kinds of options like <code class=\"language-text\">duration</code> and <code class=\"language-text\">easing</code>.</p>\n<p>However,</p>\n<p>We can demonstrate this by opening <a href=\"https://codesandbox.io/s/animation-worklet-api-template-vw0mk\">the CodeSandbox sandbox</a>. In <code class=\"language-text\">index.js</code> we call the <code class=\"language-text\">KeyframeEffect</code> with a <code class=\"language-text\">duration</code> of <code class=\"language-text\">1000</code>. If in <code class=\"language-text\">worklet.js</code> we write:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">effect<span class=\"token punctuation\">.</span>localTime <span class=\"token operator\">=</span> <span class=\"token number\">999</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>We can see the animation is on the final frame. If we change that to a value outside of the provided <code class=\"language-text\">duration</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">effect<span class=\"token punctuation\">.</span>localTime <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// or</span>\neffect<span class=\"token punctuation\">.</span>localTime <span class=\"token operator\">=</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><code class=\"language-text\">KeyframeEffect</code> produces an invalid value, and the transform breaks completely. Its timeline is essentially clamped.</p>\n<p>This is a major problem when creating spring animations or extending <code class=\"language-text\">KeyframeEffect</code> with non-standard easing effects that overshoot the provided keyframes range.</p>\n<p>The sane way to implement new easing functions would be to simply treat <code class=\"language-text\">localTime</code> as a kind of progress value. We could</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// worklet.js</span>\n<span class=\"token keyword\">import</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">as</span> easing <span class=\"token keyword\">from</span> <span class=\"token string\">\"@popmotion/easing\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">registerAnimation</span><span class=\"token punctuation\">(</span>\n  <span class=\"token string\">\"tween\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token keyword\">class</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> duration <span class=\"token operator\">=</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">,</span> easing <span class=\"token operator\">=</span> <span class=\"token string\">\"backOut\"</span> <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>duration <span class=\"token operator\">=</span> duration<span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>easing <span class=\"token operator\">=</span> easing<span class=\"token punctuation\">[</span>easing<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token function\">animate</span><span class=\"token punctuation\">(</span>currentTime<span class=\"token punctuation\">,</span> effect<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">const</span> progress <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">min</span><span class=\"token punctuation\">(</span>currentTime <span class=\"token operator\">/</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>duration<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">const</span> easedProgress <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">easing</span><span class=\"token punctuation\">(</span>progress<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      effect<span class=\"token punctuation\">.</span>localTime <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>duration <span class=\"token operator\">*</span> easedProgress<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Depending on the under or overshoot effects of <code class=\"language-text\">easing</code>, the value of <code class=\"language-text\">easedProgress</code> could quite easily be <code class=\"language-text\">-0.1</code> or <code class=\"language-text\">1.2</code>.</p>\n<p>Applying this to a <code class=\"language-text\">KeyframeEffect</code> that could gracefully handle times outside of its defined <code class=\"language-text\">duration</code> would naturally lead to appropriately eased motion. As it’s implemented today, the animation would simply break.</p>\n<p>Currently the only way to run time-based keyframe animations is by passing a worklet an instance of <code class=\"language-text\">KeyframeEffect</code>. This interface contains a glaring flaw</p>\n<p>This might be more of a problem with <code class=\"language-text\">KeyframeEffect</code> but as this is the main driver</p>\n<p>The way <code class=\"language-text\">WorkletAnimation</code> currently handles an <code class=\"language-text\">effect.localTime</code> value of less than <code class=\"language-text\">0</code> and more than the <code class=\"language-text\">duration</code> set in its provided timeline is by setting the</p>\n<p>There’s currently a bug in the Chrome implementation of Animation Worklet that you can invoke yourself</p>\n<p>It’s not even possible to support over or under-shoot easing.</p>\n<h2 id=\"4-interpolation\"><a href=\"#4-interpolation\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4. Interpolation</h2>\n<p>In this demo, each app icon is interpolating its scale and position from the x/y position of the pannable container.</p>\n<iframe\n  src=\"https://codesandbox.io/embed/goofy-hill-6j6l074q9r?fontsize=14&hidenavigation=1&theme=dark\"\n  style=\"width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;\"\n  title=\"Framer Motion: Apple Watch Dock\"\n  allow=\"geolocation; microphone; camera; midi; vr; accelerometer; gyroscope; payment; ambient-light-sensor; encrypted-media; usb\"\n  sandbox=\"allow-modals allow-forms allow-popups allow-scripts allow-same-origin\"\n></iframe>\n<p>In combination with pointer events and unclamped timelines, the ability</p>\n<p>In theory, it would be possible to write a library that could give any provided target extra “headroom” on either side.</p>\n<p>For instance, to animate between <code class=\"language-text\">0</code> and <code class=\"language-text\">100</code> with an easing function that overshoots</p>\n<p><a href=\"https://github.com/GoogleChromeLabs/houdini-samples/blob/master/animation-worklet/spring-timing/index.html#L68\">https://github.com/GoogleChromeLabs/houdini-samples/blob/master/animation-worklet/spring-timing/index.html#L68</a></p>\n<p>Problem with this approach is it works great between values of the same type\nbut one of the true benefits of these brwoser animation APIs is animating between value types</p>\n<p>x: “500px”\nx: “50vw”</p>\n<p>What if 500px is to the left of the element and 100vw is to the right?</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// Main thread</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">animate</span><span class=\"token punctuation\">(</span>element<span class=\"token punctuation\">,</span> origin<span class=\"token punctuation\">,</span> target<span class=\"token punctuation\">,</span> duration<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">WorkletAnimation</span><span class=\"token punctuation\">(</span>\n    <span class=\"token string\">\"tween\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token keyword\">new</span> <span class=\"token class-name\">KeyframeEffect</span><span class=\"token punctuation\">(</span>\n      element<span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">{</span> <span class=\"token string\">\"--x\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>origin<span class=\"token punctuation\">,</span> target <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">{</span> duration<span class=\"token punctuation\">:</span> duration <span class=\"token operator\">*</span> <span class=\"token number\">2</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    document<span class=\"token punctuation\">.</span>timeline\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">play</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// Worklet</span>\n<span class=\"token function\">registerAnimation</span><span class=\"token punctuation\">(</span>\n  <span class=\"token string\">\"tween\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token keyword\">class</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">animate</span><span class=\"token punctuation\">(</span>currentTime<span class=\"token punctuation\">,</span> effect<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>This pushes the accessibility of Animation Worklet deep into “nonsense that only library authors will ever put up with”.</p>\n<p>The idea of using <code class=\"language-text\">localTime</code> almost as an abstraction</p>\n<h2 id=\"conclusion\"><a href=\"#conclusion\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Conclusion</h2>\n<p>We already have a Web Animations API that, while limited, is capable enough to perform keyframe animations. In tandem with Houdini’s <a href=\"https://web.dev/css-props-and-vals/\">Properties and Values API</a> (which already enjoys fair cross-browser support) it can finally animate transforms individually, removing my personal final deal-breaker.</p>\n<p>It’s weird that there the concept of a ScrollTimeline</p>\n<p>The Animation Worklet API is, for someone who has been writing <a href=\"https://popmotion.io/pure\">various</a> <a href=\"https://popmotion.io/pose\">animation</a> <a href=\"https://framer.com/motion\">libraries</a> for six years, the chance of a lifetime.</p>\n<p>Unless we see some movement on the list above, it isn’t good for anything beyond scroll-driven effects like parallax.</p>","frontmatter":{"title":"Animation Worklet: The Missing Pieces","date":"30 Jan 2020"},"fields":{"slug":"/20200130-animationworklet-the-missing-pieces/","author":"mattperry","description":"There's some glimmers of promise in the current Houdini Animation Worklet API proposal, but it won't be fit for purpose without these changes."}}},"pageContext":{"slug":"/20200130-animationworklet-the-missing-pieces/","author":"mattperry","description":"There's some glimmers of promise in the current Houdini Animation Worklet API proposal, but it won't be fit for purpose without these changes."}}