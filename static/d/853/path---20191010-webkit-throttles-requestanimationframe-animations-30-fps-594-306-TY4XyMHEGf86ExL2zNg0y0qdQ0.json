{"data":{"markdownRemark":{"html":"<blockquote>\n<p><strong>TLDR:</strong> WebKit-based browsers throttle <code class=\"language-text\">requestAnimationFrame</code> to 30fps when the content is served in cross-origin iframes, or the device is in low-power mode.</p>\n</blockquote>\n<p>Look at this animation:</p>\n<p>— Insert 30fps example —</p>\n<p>Notice anything eye-thrashing about it?</p>\n<p>That’s right - it’s running at 30 frames per second (fps). If you’re reading this in 2019 that’s half the framerate of your average smartphone or laptop monitor. It’s an even smaller fraction of a high-framerate display like those found in VR headsets or the iPad Pro.</p>\n<p>It should actually look like this animation (made with <a href=\"https://framer.com/motion\">Framer Motion</a>):</p>\n<p>— Insert 60fps animation —</p>\n<p>If you’re reading this on a WebKit-powered browser like Safari or iOS Chrome, you won’t actually see a difference in the quality of this animation. This is because there’s a couple of situations in which WebKit throttles the rate of <code class=\"language-text\">requestAnimationFrame</code>, the JavaScript function that drives all of the JS-powered animations on the web.</p>\n<h2 id=\"1-in-cross-origin-iframes\"><a href=\"#1-in-cross-origin-iframes\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1) In cross-origin iframes</h2>\n<p>Take a look at this animation :</p>\n<p>— Insert 60fps example —</p>\n<p>In most browsers, this animation will run at 60fps. But in WebKit-based browsers, which include mobile and desktop Safari, and iOS Chrome, it’ll be throttled to 30fps.</p>\n<p>The content in the iframe is being served from a different domain to this blog, so it’s known as <strong>cross-origin</strong>. WebKit throttles calls to <code class=\"language-text\">requestAnimationFrame</code> in cross-origin iframes to 30fps - until they’re interacted with.</p>\n<p>Try it: Click or tap anywhere in the iframe and watch as the 30fps eye-thrashing turns into a 60fps eye-massage.</p>\n<h3 id=\"but-why-though\"><a href=\"#but-why-though\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>But why though?</h3>\n<p>At the turn of the 2020s, media and smartphones have finally laid claim to every second of temporal territory that was previously occupied by pondersome or errant thought.</p>\n<p>Such is the demand on our attention from sources that we seemingly choose, we’ve built up exceptional filters for sources that we don’t: advertising.</p>\n<p>Cross-domain iframes are usually used to serve advertising. Advertising often uses garish animation to try and steal some scraps of our attention, but these days even animals have advert-blindness.</p>\n<p>So allowing these unseen parades of capitalism access to the full might of our powerful modern processors would be a waste of cycles and battery.</p>\n<p>As a result, because <code class=\"language-text\">crossDomainIframes === advertising</code> (usually), the developers of WebKit decided add this blanket optimisation that would reduce their battery.</p>\n<p>To detect whether the content is high-value enough to lend all the clock cycles, the user has to “opt-in” by interacting with it with a tap. This usually works quite well but for stuff like CodeSandbox examples (above) it can lead</p>\n<h2 id=\"2-in-low-power-mode\"><a href=\"#2-in-low-power-mode\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2) In low-power mode</h2>\n<p>As detailed in <a href=\"https://bugs.webkit.org/show_bug.cgi?id=168837\">this WebKit bug</a>, iOS throttles all <code class=\"language-text\">requestAnimationFrame</code> to 30fps when a device is in low-power mode.</p>\n<p>This I find far more frustrating as a developer, than throttling cross-domain iframes.</p>\n<p>It’s a small win for users as they get mildly improved battery life in return.</p>\n<p>But it seems to me like a temporary version of the kind of battery-saving throttling Apple got in <a href=\"https://daringfireball.net/2017/12/apple_iphone_batteries\">big trouble for</a> a couple years ago.</p>\n<p>Apple would never dare impose the same kind of throttling on apps because it’d degrade the overall experience. Imagine if once a day your whole OS felt slower.</p>\n<p>So it just becomes yet another thing, alongside cookie opt-ins and dynamically injected ads), that reinforces the view that the web is a second-rate experience.</p>\n<p>It becomes a self-perpetuating cycle. Developers are users, and if a user’s expectation of the web is low then the experience actually will be. Which further reinforces this view and leads back to…</p>","frontmatter":{"title":"When WebKit throttles animations to 30fps","date":"10 Oct 2019"},"fields":{"slug":"/20191010-webkit-throttles-requestanimationframe-animations-30fps/","author":"mattperry","description":"Webkit-based browsers may throttle requestAnimationFrame to 30fps. Learn when, why, and how you can avoid it."}}},"pageContext":{"slug":"/20191010-webkit-throttles-requestanimationframe-animations-30fps/","author":"mattperry","description":"Webkit-based browsers may throttle requestAnimationFrame to 30fps. Learn when, why, and how you can avoid it."}}