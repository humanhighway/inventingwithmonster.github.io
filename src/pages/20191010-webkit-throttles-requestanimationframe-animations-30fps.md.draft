---
title: When WebKit throttles animations to 30fps
description: Webkit-based browsers may throttle requestAnimationFrame to 30fps. Learn when, why, and how you can avoid it.
author: mattperry
date: "20191010"
---

> **TLDR:** WebKit-based browsers throttle `requestAnimationFrame` to 30fps when the content is served in cross-origin iframes, or the device is in low-power mode.

Look at this animation:

-- Insert 30fps example --

Notice anything eye-thrashing about it?

That's right - it's running at 30 frames per second (fps). If you're reading this in 2019 that's half the framerate of your average smartphone or laptop monitor. It's an even smaller fraction of a high-framerate display like those found in VR headsets or the iPad Pro.

It should actually look like this animation (made with [Framer Motion](https://framer.com/motion)):

-- Insert 60fps animation --

If you're reading this on a WebKit-powered browser like Safari or iOS Chrome, you won't actually see a difference in the quality of this animation. This is because there's a couple of situations in which WebKit throttles the rate of `requestAnimationFrame`, the JavaScript function that drives all of the JS-powered animations on the web.

## 1) In cross-origin iframes

Take a look at this animation :

-- Insert 60fps example --

In most browsers, this animation will run at 60fps. But in WebKit-based browsers, which include mobile and desktop Safari, and iOS Chrome, it'll be throttled to 30fps.

The content in the iframe is being served from a different domain to this blog, so it's known as **cross-origin**. WebKit throttles calls to `requestAnimationFrame` in cross-origin iframes to 30fps - until they're interacted with.

Try it: Click or tap anywhere in the iframe and watch as the 30fps eye-thrashing turns into a 60fps eye-massage.

### But why though?

At the turn of the 2020s, media and smartphones have finally laid claim to every second of temporal territory that was previously occupied by pondersome or errant thought.

Such is the demand on our attention from sources that we seemingly choose, we've built up exceptional filters for sources that we don't: advertising.

Cross-domain iframes are usually used to serve advertising. Advertising often uses garish animation to try and steal some scraps of our attention, but these days even animals have advert-blindness.

So allowing these unseen parades of capitalism access to the full might of our powerful modern processors would be a waste of cycles and battery.

As a result, because `crossDomainIframes === advertising` (usually), the developers of WebKit decided add this blanket optimisation that would reduce their battery.

To detect whether the content is high-value enough to lend all the clock cycles, the user has to "opt-in" by interacting with it with a tap. This usually works quite well but for stuff like CodeSandbox examples (above) it can lead

## 2) In low-power mode

As detailed in [this WebKit bug](https://bugs.webkit.org/show_bug.cgi?id=168837), iOS throttles all `requestAnimationFrame` to 30fps when a device is in low-power mode.

This I find far more frustrating as a developer, than throttling cross-domain iframes.

It's a small win for users as they get mildly improved battery life in return.

But it seems to me like a temporary version of the kind of battery-saving throttling Apple got in [big trouble for](https://daringfireball.net/2017/12/apple_iphone_batteries) a couple years ago.

Apple would never dare impose the same kind of throttling on apps because it'd degrade the overall experience. Imagine if once a day your whole OS felt slower.

So it just becomes yet another thing, alongside cookie opt-ins and dynamically injected ads), that reinforces the view that the web is a second-rate experience.

It becomes a self-perpetuating cycle. Developers are users, and if a user's expectation of the web is low then the experience actually will be. Which further reinforces this view and leads back to...
